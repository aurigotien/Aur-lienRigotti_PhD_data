### Uniaxial shearing ###

## Add grain/grain friction ##

    pair_style   gran/hooke/history 2E7 1E7 3E3 2.2E3 0.5 0 # contact Hookien entre particule sans friction
    pair_coeff	 * * 

## Creating groups ##
    
# Computation of the grains diameters

    # This block ensure that the computed values are actualised
    compute      dgrain all property/atom diameter # compute the diameter  of the grains -> output = scalare / grain
    compute      scal_dgrain all reduce ave c_dgrain # compute the mean diameter of the particles 
    thermo_style custom step pxx pyy pxy c_scal_dgrain # modification of the output 
    run          0
    
    # Attribution of the group per size of grains
    variable     d_min atom "c_dgrain == 3.0" 
    group        dgrain_min variable d_min # grains with d = dmin in this groupe
    variable     d_max atom "c_dgrain == 4.0"
    group        dgrain_max variable d_max # grains d = dmax in this groupe

    # Create the group for each size of grains
    group        dfloes_min subtract all dgrain_max
    group        dfloes_max subtract all dgrain_min
    
# Stress, coordination number and grain movement computation
 
    # Neighbor computation
    compute      voisin all contact/atom # compute number of neighbor  at d = dmin of the center of each grains
    compute      moy_voisin all reduce ave c_voisin # mean of the neighbor over all the grains
    
    # Stress of the system
    compute      sigma all stress/atom NULL virial # computation of the stress tensor componenent for each atoms
    compute      moy_sigma all reduce sum c_sigma[*] # sum the stress tensor over every atoms
    
   # Grains movement
    compute      u_floes all displace/atom 
    compute      u_moy_floes all reduce ave c_u_floes[*][*]
    
    # Temperature
    compute      temperature all temp/sphere
    
## Variable ##

    variable     sigma_xx equal c_moy_sigma[1]
    variable     sigma_yy equal c_moy_sigma[2]
    variable     sigma_xy equal c_moy_sigma[4]
    
    variable     p equal "(c_moy_sigma[1]+c_moy_sigma[2])/2"

## Output command ##

    thermo       10000 # output every 10 000 step of time
    thermo_style custom & 
                 step atoms c_temperature press & 
                 c_moy_voisin density &
                 lx ly xy & 
                 v_sigma_xx v_sigma_yy v_sigma_xy &
                 v_p c_u_moy_floes[1] c_u_moy_floes[2]
    
   # Graphic output
    #dump		 cisaillement_img all image 300000 cisaillement.*.jpg type type &
    #             zoom 0.9 adiam 4.0
    #dump_modify	 cisaillement_img pad 5
    
    #dump         evo_voisin all custom 1000 voisin.txt id c_voisin # output the number of neighbor / grain in a text file 
 
    #dump         shearing all movie 500 shearing.avi type type &
    #             zoom 1.2 adiam 4.0 # create a video of the shearing 
	#dump_modify  shearing pad 5


## Shearing of the sample ##
    
    # Beginning of the simulation
    timestep     1E-5 # simulation time step

    # Define of the shearing with constant speed imposed by tilting the simulation box + unixial compression
    fix          cisaillement all deform 1 xy erate 5E-3 units box 

    fix          comp_floes all nph/sphere & 
                 y 4E3 4E3 1E3 &
                 couple none disc 
    
    fix          2Dsimu all enforce2d # ensure 2D simulation by zeroing strenght/speed in z direction
  
    restart      600000 endo.restart # create a file to restart a simulation every 600 000 step of times (10 files created)

## End of shearing ##
    
	run          6000000 #  6 000 000 step of simulation 
    
### End of shearing step ###